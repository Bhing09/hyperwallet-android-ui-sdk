// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        jcenter()
        mavenLocal()
        
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.2'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7"
        
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenLocal()
        
    }
    project.version = "1.0.0-beta03-SNAPSHOT"

}

subprojects {

    ext {
        hyperwalletGroupId = 'com.hyperwallet.android'
    }

    apply plugin: 'com.android.library'
    android {
        compileSdkVersion 28
        defaultConfig {
            minSdkVersion 21
            targetSdkVersion 28
            versionCode 1
            versionName version
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            testInstrumentationRunnerArgument "listener", "com.squareup.leakcanary.FailTestOnLeakRunListener"
        }

        sourceSets {
            androidTest {
                resources.srcDirs += ['src/test/resources']
            }
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
            debug {
                testCoverageEnabled true
            }
        }

        lintOptions {
            abortOnError true
            warningsAsErrors true
            lintConfig file("config/lint.xml")
        }
    }

    task javadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        failOnError false
    }

    task javadocsJar(type: Jar, dependsOn: javadocs) {
        classifier = 'javadoc'
        from javadocs.destinationDir
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

}

task clean(type: Delete) {
    delete rootProject.buildDir
}