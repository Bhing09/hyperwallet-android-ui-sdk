apply plugin: 'jacoco'

final def jacocoVersion = "0.8.2"

jacoco {
    toolVersion = jacocoVersion
}

android {
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

def fileFilter = ['**/BuildConfig.*',
                  '**/com/hyperwallet/android/ui/common/view/error/DefaultErrorDialogFragment.*',
                  '**/com/hyperwallet/android/ui/common/view/HorizontalDividerItemDecorator.*',
                  '**/com/hyperwallet/android/ui/common/view/OneClickListener.*',
                  '**/com/hyperwallet/android/ui/common/util/TransferMethodUtils.*'
]

def debugClassPaths = [
        '**/intermediates/javac/debug/*/classes/**'
]

final def coverageSourceDirs = ["$project.projectDir/src/main/java/*"]

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {

    group = 'Reporting'
    description = 'Generate Jacoco coverage reports.'

    reports {
        html {
            enabled = true
            destination file("$buildDir/reports/jacoco")
        }
    }

    classDirectories = fileTree(
            dir: "${buildDir}",
            includes: debugClassPaths,
            excludes: fileFilter
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}

task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'jacocoTestReport') {

    group = 'Verification'
    classDirectories = fileTree(
            dir: "${buildDir}",
            includes: debugClassPaths,
            excludes: fileFilter
    )
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")

    violationRules {
        setFailOnViolation(true)

        rule {
            element = 'CLASS'
            limit {
                value = 'COVEREDRATIO'
                counter = 'BRANCH'
                minimum = 0.65
            }
        }
    }
}

